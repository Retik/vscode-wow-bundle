{
	"multiline comment": {
		"prefix": "-[",
		"body": [
			"--[[",
			"${TM_SELECTED_TEXT:comment...}",
			"$0",
			"]]",
			""
		],
		"description": "Create a multiline comment"
	},

	"nested multiline comment": {
		"prefix": "=[",
		"body": [
			"--[=[",
			"${TM_SELECTED_TEXT:comment...}",
			"$0",
			"]=]",
			""
		],
		"description": "Create a nested multiline comment"
	},

	"function definition": {
		"prefix": "func",
		"body": [
			"function ${1:FunctionName}(${2:args})",
			"\t$0",
			"end",
			""
		],
		"description": "Create a function"
	},

	"function definition (local)": {
		"prefix": "func",
		"body": [
			"local function ${1:FunctionName}(${2:args})",
			"\t$0",
			"end",
			""
		],
		"description": "Create a local function"
	},

	"while loop": {
		"prefix": "while",
		"body": [
			"while ${1:condition} do",
			"\t$0",
			"end",
			""
		],
		"description": "Create a while loop"
	},

	"repeat loop": {
		"prefix": "repeat",
		"body": [
			"repeat",
			"\t$0",
			"until ${1:condition}",
			""
		],
		"description": "Create a repeat loop"
	},

	"for loop": {
		"prefix": "for",
		"body": [
			"for ${1:i} = ${2:start}, ${3:end} do",
			"\t$0",
			"end",
			""
		],
		"description": "Create a for loop"
	},

	"for i,v in ipairs()": {
		"prefix": "for",
		"body": [
			"for ${1:i},${2:v} in ipairs(${3:tableName}) do",
			"\t$0",
			"end",
			""
		],
		"description": "Create a for loop using ipairs"
	},

	"for k,v in pairs()": {
		"prefix": "for",
		"body": [
			"for ${1:k},${2:v} in pairs(${3:tableName}) do",
			"\t$0",
			"end",
			""
		],
		"description": "Create a for loop using pairs"
	},

	"variable definition": {
		"prefix": "var",
		"body": [
			"${0:variable} = ${1:value}",
			""
		],
		"description": "Create a global variable"
	},

	"variable definition (local)": {
		"prefix": "var",
		"body": [
			"local ${0:variable} = ${1:value}",
			""
		],
		"description": "Create a local variable"
	},

	"if conditional": {
		"prefix": "if",
		"body": [
			"if ${1:value} then",
			"\t$0",
			"end",
			""
		],
		"description": "Create an if conditional"
	},

	"if else conditional": {
		"prefix": "if",
		"body": [
			"if ${1:value} then",
			"\t$2",
			"else",
			"\t$3",
			"end",
			""
		],
		"description": "Create an if else conditional"
	},

	"if not conditional": {
		"prefix": "if",
		"body": [
			"if not ${1:value} then",
			"\t$0",
			"end",
			""
		],
		"description": "Create an if not conditional"
	},

	"if not else conditional": {
		"prefix": "if",
		"body": [
			"if not ${1:value} then",
			"\t$2",
			"else",
			"\t$3",
			"end",
			""
		],
		"description": "Create an if not else conditional"
	},

	"table definition": {
		"prefix": "tab",
		"body": [
			"${1:tableName} = { ${2:value1}, ${3:value2} }"
		],
		"description": "Create a global table"
	},

	"table definition (local)": {
		"prefix": "tab",
		"body": [
			"local ${1:tableName} = { ${2:value1}, ${3:value2} }"
		],
		"description": "Create a local table"
	},

	"table.insert": {
		"prefix": "tins",
		"body": [
			"table.insert(${1:tableName}, ${0:data})"
		],
		"description": "Insert a given value into a table"
	},

	"tinsert": {
		"prefix": "tins",
		"body": [
			"tinsert(${1:tableName}, ${0:data})"
		],
		"description": "Insert a given value into a table"
	},

	"table.concat": {
		"prefix": "tconc",
		"body": [
			"table.concat(${1:tableName}${2:, ' '}${3:, start_index}${4:, end_index})"
		],
		"description": "Concatenates string tables"
	},

	"table.sort": {
		"prefix": "tsort",
		"body": [
			"table.sort(${1:tableName}${2:, sortfunction})"
		],
		"description": "Sorts a table. You can use a sort function to choose how to sort"
	},

	"table.remove": {
		"prefix": "trem",
		"body": [
			"table.remove(${1:tableName}${2:, position})"
		],
		"description": "Remove an element from a table"
	},

	"tremove": {
		"prefix": "trem",
		"body": [
			"tremove(${1:tableName}${2:, position})"
		],
		"description": "Remove an element from a table"
	},

	"table.wipe": {
		"prefix": "wipe",
		"body": [
			"table.wipe(${1:tableName})"
		],
		"description": "Wipe a table"
	},

	"wipe": {
		"prefix": "wipe",
		"body": [
			"wipe(${1:tableName})"
		],
		"description": "Wipe a table"
	},

	"unpack table": {
		"prefix": "unpack",
		"body": [
			"unpack(${1:tableName}${2:, i}${3:, j})"
		],
		"description": "Returns the list of elements in a table"
	},

	"tostring": {
		"prefix": "tostring",
		"body": [
			"tostring(${1:value})"
		],
		"description": "Returns a string representation of a value"
	},

	"tonumber": {
		"prefix": "tonumber",
		"body": [
			"tonumber(${1:string}${2:, base})"
		],
		"description": "Return a number if arg can be converted to number. Optional argument specifies the base to interpret the numeral."
	},

	"string length": {
		"prefix": "strlen",
		"body": [
			"strlen(${1:string})"
		],
		"description": "Return a number if arg can be converted to number. Optional argument specifies the base to interpret the numeral."
	},

	"abs": {
		"prefix": "abs",
		"body": [
			"abs(${0:x})"
		],
		"description": "Returns the absolute value of the number"
	},

	"math.abs": {
		"prefix": "abs",
		"body": [
			"math.abs(${0:x})"
		],
		"description": "Returns the absolute value of the number"
	},

	"acos": {
		"prefix": "acos",
		"body": [
			"acos(${0:x})"
		],
		"description": "Returns the arc cosine of the value in degrees"
	},

	"math.acos": {
		"prefix": "acos",
		"body": [
			"math.acos(${0:x})"
		],
		"description": "Returns the arc cosine of the value in degrees"
	},

	"asin": {
		"prefix": "asin",
		"body": [
			"asin(${0:x})"
		],
		"description": "Returns the arc sine of the value in degrees"
	},

	"math.asin": {
		"prefix": "asin",
		"body": [
			"math.asin(${0:x})"
		],
		"description": "Returns the arc sine of the value in degrees"
	},

	"atan": {
		"prefix": "atan",
		"body": [
			"atan(${0:x})"
		],
		"description": "Returns the arc tangent of the value in degrees"
	},

	"math.atan": {
		"prefix": "atan",
		"body": [
			"math.atan(${0:x})"
		],
		"description": "Returns the arc tangent of the value in degrees"
	},

	"atan2": {
		"prefix": "atan2",
		"body": [
			"atan2(${0:y}, ${1:x})"
		],
		"description": "Returns the arc tangent of y/x in degrees"
	},

	"math.atan2": {
		"prefix": "atan2",
		"body": [
			"math.atan2(${0:y}, ${1:x})"
		],
		"description": "Returns the arc tangent of y/x in degrees"
	},

	"ceil": {
		"prefix": "ceil",
		"body": [
			"ceil(${0:x})"
		],
		"description": "Returns the ceiling of value"
	},

	"math.ceil": {
		"prefix": "ceil",
		"body": [
			"math.ceil(${0:x})"
		],
		"description": "Returns the ceiling of value"
	},

	"cos": {
		"prefix": "cos",
		"body": [
			"cos(${0:x})"
		],
		"description": "Returns the cosine of the degree value"
	},

	"math.cos": {
		"prefix": "cos",
		"body": [
			"math.cos(${0:x})"
		],
		"description": "Returns the cosine of the degree value"
	},

	"deg": {
		"prefix": "deg",
		"body": [
			"deg(${0:x})"
		],
		"description": "Returns the degree equivalent of the radian value"
	},

	"math.deg": {
		"prefix": "deg",
		"body": [
			"math.deg(${0:x})"
		],
		"description": "Returns the degree equivalent of the radian value"
	},

	"exp": {
		"prefix": "exp",
		"body": [
			"exp(${0:x})"
		],
		"description": "Returns the exponent of value"
	},

	"math.exp": {
		"prefix": "exp",
		"body": [
			"math.exp(${0:x})"
		],
		"description": "Returns the exponent of value"
	},

	"floor": {
		"prefix": "floor",
		"body": [
			"floor(${0:x})"
		],
		"description": "Returns the floor of value"
	},

	"math.floor": {
		"prefix": "floor",
		"body": [
			"math.floor(${0:x})"
		],
		"description": "Returns the floor of value"
	},

	"fmod": {
		"prefix": "fmod",
		"body": [
			"fmod(${1:x}, ${2:y})"
		],
		"description": "Returns the remainder of the division of value by modulus that rounds the quotient towards zero"
	},

	"math.fmod": {
		"prefix": "fmod",
		"body": [
			"math.fmod(${1:x}, ${2:y})"
		],
		"description": "Returns the remainder of the division of value by modulus that rounds the quotient towards zero"
	},

	"frexp": {
		"prefix": "frexp",
		"body": [
			"frexp(${0:x})"
		],
		"description": "Extract mantissa and exponent from a floating point number"
	},

	"math.frexp": {
		"prefix": "frexp",
		"body": [
			"math.frexp(${0:x})"
		],
		"description": "Extract mantissa and exponent from a floating point number"
	},

	"ldexp": {
		"prefix": "ldexp",
		"body": [
			"ldexp(${0:value}, ${1:exponent})"
		],
		"description": "Load exponent of a floating point number"
	},

	"math.ldexp": {
		"prefix": "ldexp",
		"body": [
			"math.ldexp(${0:value}, ${1:exponent})"
		],
		"description": "Load exponent of a floating point number"
	},

	"log": {
		"prefix": "log",
		"body": [
			"log(${0:x})"
		],
		"description": "Returns the natural logarithm (log base e) of value"
	},

	"math.log": {
		"prefix": "log",
		"body": [
			"math.log(${0:x})"
		],
		"description": "Returns the natural logarithm (log base e) of value"
	},

	"log10": {
		"prefix": "log10",
		"body": [
			"log10(${0:x})"
		],
		"description": "Returns the base-10 logarithm of value"
	},

	"math.log10": {
		"prefix": "log10",
		"body": [
			"math.log10(${0:x})"
		],
		"description": "Returns the base-10 logarithm of value"
	},

	"max": {
		"prefix": "max",
		"body": [
			"max(${1:x}, ${2:...})"
		],
		"description": "Returns the numeric maximum of the input values"
	},

	"math.max": {
		"prefix": "max",
		"body": [
			"math.max(${1:x}, ${2:...})"
		],
		"description": "Returns the numeric maximum of the input values"
	},

	"min": {
		"prefix": "min",
		"body": [
			"min(${1:x}, ${2:...})"
		],
		"description": "Returns the numeric minimum of the input values"
	},

	"math.min": {
		"prefix": "min",
		"body": [
			"math.min(${1:x}, ${2:...})"
		],
		"description": "Returns the numeric minimum of the input values"
	},

	"rad": {
		"prefix": "rad",
		"body": [
			"rad(${0:x})"
		],
		"description": "Returns the radian equivalent of the degree value"
	},

	"math.rad": {
		"prefix": "rad",
		"body": [
			"math.rad(${0:x})"
		],
		"description": "Returns the radian equivalent of the degree value"
	},

	"random": {
		"prefix": "random",
		"body": [
			"random()"
		],
		"description": "Returns a random number"
	},

	"random (bounded)": {
		"prefix": "random",
		"body": [
			"random(${1:lower}, ${2:upper})"
		],
		"description": "Returns a random number (optionally bounded integer value)"
	},

	"math.random": {
		"prefix": "random",
		"body": [
			"math.random()"
		],
		"description": "Returns a random number (optionally bounded integer value)"
	},

	"math.random (bounded)": {
		"prefix": "random",
		"body": [
			"math.random(${1:lower}, ${2:upper})"
		],
		"description": "Returns a random number (optionally bounded integer value)"
	},

	"fastrandom": {
		"prefix": "random",
		"body": [
			"fastrandom()"
		],
		"description": "Returns a random number (faster than random and math.random but can't be used in secure enviorment)"
	},

	"fastrandom (bounded)": {
		"prefix": "random",
		"body": [
			"fastrandom(${1:lower}, ${2:upper})"
		],
		"description": "Returns a random number (faster than random and math.random but can't be used in secure enviorment)"
	},

	"sin": {
		"prefix": "sin",
		"body": [
			"sin(${0:x})"
		],
		"description": "Returns the sine of the degree value"
	},

	"math.sin": {
		"prefix": "sin",
		"body": [
			"math.sin(${0:x})"
		],
		"description": "Returns the sine of the degree value"
	},

	"sqrt": {
		"prefix": "sqrt",
		"body": [
			"sqrt(${0:x})"
		],
		"description": "Return the square root of value"
	},

	"math.sqrt": {
		"prefix": "sqrt",
		"body": [
			"math.sqrt(${0:x})"
		],
		"description": "Return the square root of value"
	},

	"tan": {
		"prefix": "tan",
		"body": [
			"tan(${0:x})"
		],
		"description": "Returns the tangent of the degree value"
	},

	"math.tan": {
		"prefix": "tan",
		"body": [
			"math.tan(${0:x})"
		],
		"description": "Returns the tangent of the degree value"
	},

	"return": {
		"prefix": "return",
		"body": [
			"return ${0:value}"
		],
		"description": "Return value(s)"
	},

	"print": {
		"prefix": "print",
		"body": [
			"print(${0:content})"
		],
		"description": "Print something"
	},

	"Database (savedvariables)": {
		"prefix": "svar",
		"body": [
			"${1:name}DB = $1DB or {}",
			""
		],
		"description": "Create a global database variable to use for savedvariables"
	},

	"Create Frame": {
		"prefix": "frame",
		"body": [
			"local ${1:frame} = CreateFrame('Frame'${2:, 'frameName'}${3:, parentFrame})"
		],
		"description": "Create a standard frame"
	},

	"Create Button": {
		"prefix": "button",
		"body": [
			"local ${1:button} = CreateFrame('Button'${2:, 'buttonName'}${3:, parentFrame})"
		],
		"description": "Create a standard button"
	},

	"Frame Texture": {
		"prefix": "texture",
		"body": [
			"local ${1:texture} = ${2:parentFrame}:CreateTexture(${3:'textureName'}${4:, 'LAYER'})"
		],
		"description": "Create a texture to apply on a frame/button"
	},

	"Frame Text": {
		"prefix": "text",
		"body": [
			"local ${1:text} = ${2:parentFrame}:CreateFontString(${3:'stringName'}${4:, 'LAYER'})"
		],
		"description": "Create text to apply on a frame/button"
	},

	"SetScript to function definition": {
		"prefix": "script",
		"body": [
			"${1:frame}:SetScript(${2:'event_name'}, function(self, event, ...)",
			"\t$0",
			"end)",
			""
		],
		"description": "Create a self running function script"
	},

	"SetScript to function": {
		"prefix": "script",
		"body": [
			"${1:frame}:SetScript(${2:'event_name'}, ${3:function_name})"
		],
		"description": "Create a script to run a function"
	},

	"Slash Command": {
		"prefix": "slash",
		"body": [
			"SLASH_${1:NAME_ALL_CAPS}1 = '/${2:slashcommand}'",
			"SlashCmdList['$1'] = function()",
			"\t$0",
			"end",
			""
		],
		"description": "Create a slash command"
	},

	"Declare LDB": {
		"prefix": "ldb",
		"body": [
			"local ${1:ldb} = LibStub:GetLibrary('LibDataBroker-1.1')",
			"local ${2:dataobj} = ldb:NewDataObject(${3:'AddonName'}, {",
			"\ttype = ${4:'data source'},",
			"\ticon = ${5:'Interface\\\\\\Icons'},",
			"\tlabel = ${6:'Addon Label'}",
			"\ttext = ${7:'Addon Text'}",
			"})",
			""
		],
		"description": "Declare your addon as being an LDB type data broker"
	}
}
